/*
Copyright (c) 2024 Diagrid Inc.
Licensed under the MIT License.
*/

syntax = "proto3";

package api;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "proto/api/failurepolicy.proto";

option go_package = "github.com/diagridio/go-etcd-cron/api";

// Job defines a scheduled rhythmic job stored in the database.
// Job holds the desired spec of the job, not the current trigger state, held
// by Counter.
message Job {
  // schedule is an optional schedule at which the job is to be run.
  // Accepts both systemd timer style cron expressions, as well as human
  // readable '@' prefixed period strings as defined below.
  //
  // Systemd timer style cron accepts 6 fields:
  // seconds | minutes | hours | day of month | month        | day of week
  // 0-59    | 0-59    | 0-23  | 1-31         | 1-12/jan-dec | 0-7/sun-sat
  //
  // "0 30 * * * *" - every hour on the half hour
  // "0 15 3 * * *" - every day at 03:15
  //
  // Period string expressions:
	// Entry                  | Description                                | Equivalent To
	// -----                  | -----------                                | -------------
  // @every <duration>      | Run every <duration> (e.g. '@every 1h30m') | N/A
	// @yearly (or @annually) | Run once a year, midnight, Jan. 1st        | 0 0 0 1 1 *
	// @monthly               | Run once a month, midnight, first of month | 0 0 0 1 * *
	// @weekly                | Run once a week, midnight on Sunday        | 0 0 0 * * 0
	// @daily (or @midnight)  | Run once a day, midnight                   | 0 0 0 * * *
	// @hourly                | Run once an hour, beginning of hour        | 0 0 * * * *
  optional string schedule = 1;

  // due_time is the optional time at which the job should be active, or the
  // "one shot" time if other scheduling type fields are not provided.
  // Accepts a "point in time" string in the format of RFC3339, Go duration
  // string (therefore calculated from now), or non-repeating ISO8601.
  optional string due_time = 2;

  // ttl is the optional time to live or expiration of the job.
  // Accepts a "point in time" string in the format of RFC3339, Go duration
  // string (therefore calculated from now), or non-repeating ISO8601.
  optional string ttl = 3;

  // repeats is the optional number of times in which the job should be
  // triggered. If not set, the job will run indefinitely or until expiration.
  optional uint32 repeats = 4;

  // metadata is a arbitrary metadata asociated with the job.
  google.protobuf.Any metadata = 5;

  // payload is the serialized job payload that will be sent to the recipient
  // when the job is triggered.
  google.protobuf.Any payload = 6;

  // failure_policy is the optional policy to apply when a job fails to
  // trigger.
  // By default, the failure policy is FailurePolicyConstant with a 1s delay
  // and 3 maximum retries.
  // See `failurepolicy.proto` for more information.
  optional FailurePolicy failure_policy = 7;
}
